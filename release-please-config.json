{
  // if this is the first time running `manifest-pr` on a repo
  // this key will limit how far back (exclusive) to pull commits
  // for conventional commit parsing. Once release-please has generated
  // at least one release PR, this setting will subsequently be ignored.
  // release-please will check for a manifest file at the bootstrap-sha
  // and if it doesn't find one it will fallback to checking at HEAD.
  // Notes:
  //   - full sha required.
  //   - only applicable at top-level config.
  "bootstrap-sha": "0a6ff8abc6db00aca181d6bfed9751e332900ac9",

  // release-please's normal behavior is to find the last merged release PR
  // and use the associated commit sha as the previous marker from which to
  // gather commits for the new release. With this setting you can manually
  // set the commit sha release-please will use from which to gather commits
  // for the current release.
  // This can be useful when you've accidentally merged a bad release PR.
  // While you can revert the changes from that PR and delete tags/releases
  // GitHub does not allow you to delete PRs so release-please will find
  // that last PR.
  // Notes:
  //   - full sha required.
  //   - only applicable at top-level config.
  //   - never ignored: remove/change it once a good release PR is merged
  // "last-release-sha": "0a6ff8abc6db00aca181d6bfed9751e332900ac9",

  // see Plugins section below
  // absence defaults to [] (i.e. no plugins)
  "plugins": ["node-workspace", "cargo-workspace"],

  // optional top-level defaults that can be overridden per package:

  // set default package release-type to "python"
  // absence defaults to "node"
  "release-type": "ruby",

  // where to write the version number after it's been calculated
  "version-file": "lib/maid/version.rb",

  "package-name": "maid",

  // manually set next version to be "1.2.3" ignoring conventional commits.
  // absence defaults to conventional commits derived next version.
  // Note: once the release PR is merged you should either remove this or
  // update it to a higher version. Otherwise subsequent `manifest-pr` runs
  // will continue to use this version even though it was already set in the
  // last release.
  // "release-as": "1.2.3",

  // BREAKING CHANGE only bumps semver minor if version < 1.0.0
  // absence defaults to false
  "bump-minor-pre-major": true,

  // feat commits bump semver patch instead of minor if version < 1.0.0
  // absence defaults to false
  "bump-patch-for-minor-pre-major": true,

  // setting the type of prerelease in case of prerelease strategy
  // "prerelease-type": "beta",

  // set default conventional commit => changelog sections mapping/appearance.
  // absence defaults to https://git.io/JqCZL
  // "changelog-sections": [...],

  // set default github host in changelog
  // absence defaults to https://github.com
  // "changelog-host": "https://example.com",

  // when `manifest-release` creates GitHub Releases per package, create
  // those as "Draft" releases (which can later be manually published).
  // absence defaults to false and Releases are created as already Published.
  // "draft": true,

  // when `manifest-release` creates GitHub Releases per package, create
  // those as "Prerelease" releases that have pre-major or prerelease versions.
  // absence defaults to false and all versions are fully Published.
  // "prerelease": true

  // Skip creating GitHub Releases
  // Absence defaults to false and Releases will be created. Release-Please still
  // requires releases to be tagged, so this option should only be used if you
  // have existing infrastructure to tag these releases.
  // "skip-github-release": true,

  // when using the `node-workspace` plugin, package discovery forces all
  // local dependencies to be linked, even if the SemVer ranges don't match.
  // this allows breaking version bumps to update during a release.
  // setting to false will only bump your local dependencies within the SemVer range.
  // see Breaking Changes section below
  // absence defaults to true
  // "always-link-local": false,

  // if true, create separate pull requests for each package instead of a
  // single manifest release pull request
  // absence defaults to false and one pull request will be raised
  // "separate-pull-requests": false,

  // if true, always update existing pull requests when changes are added,
  // instead of only when the release notes change.
  // This option may increase the number of API calls used, but can be useful
  // if pull requests must not be out-of-date with the base branch.
  // absence defaults to false
  "always-update": true,

  // sets the manifest pull request title for when releasing multiple packages
  // grouped together in the one pull request.
  // This option has no effect when `separate-pull-requests` is `true`.
  // Template values (i.e. ${scope}, ${component} and ${version}) are inherited
  // from the root path's (i.e. '.') package, if present
  // absence defaults to "chore: release ${branch}"
  "group-pull-request-title-pattern": "chore: release ${version}",

  // When searching for the latest release SHAs, only consider the last N releases.
  // This option prevents paginating through all releases in history when we
  // expect to find the release within the last N releases. For repositories with
  // a large number of individual packages, you may want to consider raising this
  // value, but it will increase the number of API calls used.
  "release-search-depth": 400,

  // When fetching the list of commits to consider, only consider the last N commits.
  // This option limits paginating through every commit in history when we may not
  // find the release SHA of the last release (there may not be one). We expect to
  // only need to consider the last 500 commits on a branch. For repositories with
  // a large number of individual packages, you may want to consider raising this
  // value, but it will increase the number of API calls used.
  "commit-search-depth": 500,

  // when creating multiple pull requests or releases, issue GitHub API requests
  // sequentially rather than concurrently, waiting for the previous request to
  // complete before issuing the next one.
  // This option may reduce failures due to throttling on repositories releasing
  // large numbers of packages at once.
  // absence defaults to false, causing calls to be issued concurrently.
  "sequential-calls": false

  // per package configuration: at least one entry required.
  // the key is the relative path from the repo root to the folder that contains
  // all the files for that package.
  // the value is an object with the following optional keys:
  // - overrides for above top-level defaults AND
  // - "package-name": Ignored by packages whose release-type implements source
  //                   code package name lookup (e.g. "node"). Required for all
  //                   other packages (e.g. "python")
  // - "changelog-path": Path + filename of the changelog relative to the
  //                     *package* directory. defaults to "CHANGELOG.md". E.g.
  //                     for a package key of "path/to/mypkg", the location in
  //                     the repo is path/to/pkg/CHANGELOG.md
  // - "changelog-host": Override the GitHub host when writing changelog.
  //                     Defaults to "https://github.com". E.g. for a commit of
  //                     "abc123", it's hyperlink in changelog is
  //                     https://github.com/<org>/<repo>/commit/abc123
  // "packages": {
  //   // `.` is a special case for handling to root of the repository
  //   ".": {
  //     // overrides release-type for node
  //     "release-type": "node",
  //     // exclude commits from that path from processing
  //     "exclude-paths": ["path/to/myPyPkgA"]
  //   },

  //   // path segment should be a folder relative to repository root
  //   "path/to/myJSPkgA": {
  //     // overrides release-type for node
  //     "release-type": "node",
  //     // create published GitHub Releases on `manifest-release` runs
  //     "draft": false
  //   },

  //   "path/to/myJSPkgB": {
  //     // overrides release-type for node
  //     "release-type": "node",
  //     // overrides default release-as.
  //     // see top level note about deleting/modifying after release PR merge
  //     "release-as": "3.2.1"
  //   },

  //   "path/to/my-rust-crate": {
  //     // override release-type for rust
  //     "release-type": "rust"
  //   },

  //   "path/to/myPyPkgA": {
  //     // when a default release-as is set, this is how you revert to using
  //     // conventional commits version bumping for an individual package.
  //     // Note: if present and set to "", the behavior will always be to use
  //     // conventional commits, regardless of presence or absence of default
  //     // release-as config.
  //     "release-as": "",
  //     "package-name": "coolio-pkg",
  //     // our change log is located at path/to/myPyPkgA/docs/CHANGES.rst
  //     "changelog-path": "docs/CHANGES.rst"
  //   },

  //   "path/to/github-enterprise-package": {
  //     // override changelog host for github enterprise package
  //     "changelog-host": "https://example.com"
  //   }
  // }
}
